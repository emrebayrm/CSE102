/*************************************************************
 *                                                           *
 * HW04 Q3                                                   *
 * Student Name: EMRE BAYRAM                                 *
 * Student ID  : 141044019                                   *
 * Date        : 14/03/2015                                  *
 * Points      : 45   										 *
 *                                                           *
 *************************************************************/

/*###########################################################*/
/*							INCLUDES						 */
/*###########################################################*/
#include<stdio.h>
/*###########################################################*/
/*							DEFINES							 */
/*###########################################################*/
#define TRUE 1
#define FALSE 0
#define CHARACTERFILE "Files/Q3/CharacterList.txt"
#define SAMPLEFILE "Files/Q3/Sample.txt"
#define ENCODEDFILE "Files/Q3/XUniversityEncoded.txt"
#define PLAINTEXTFILE "Files/Q3/XUniversityMessage.txt"

/*-----------------------------------------------------------*/
/*						FUNCTİON PROTYUPES					 */
/*-----------------------------------------------------------*/

/*************************************************************
 * Swaps values of two integers                              *
 *************************************************************/
void swap_int(int *a, int *b);

/*************************************************************
 * Swaps values of two characters                            *
 *************************************************************/
void swap_char(char *a, char *b);

/*************************************************************
 * Sorts characters according to counts. At the end          *
 * make sure that *c1 keeps most frequent used letter, *c3   *
 * keeps least frequent used letter and *c2 keeps remained   *
 * letter                                                    *
 *************************************************************/
void sort(char *a, int a_num, char *b, int b_num, char *c, int c_num);

/*************************************************************
 * Check whether character is big ASCII letter or not        *
 * return TRUE or FALSE                                      *
 *************************************************************/
int is_letter(char c);

/*************************************************************
 * Read characters from character list file and if character *
 * is letter assign characters to c1, c2 and c3.             *
 * If file has not three letters assign NULL to input char   *
 * by order. For ex. file has two letters assign proper      *
 * letters to c1 and c2 and assign NULL to c3. If file has   *
 * four letters assign c1, c2 and c3 first three letters.    *
 * Return number of letters in character list file.          *
 * Do not forget to count only proper letters with your      *
 * is_letter function. Return number of letters not chars    *
 *************************************************************/
int read_character_list(FILE* f_in_ptr, char *c1, char *c2, char *c3);

/*************************************************************
 * Read letters from Sample file and compute frequency of    *
 * letters. Then sort it inside this function. Call sort     *
 * function. At the end make sure that *c1 keeps most        *
 * frequent used letter, *c3 keeps least frequent used       *
 * letter and *c2 keeps remained letter                      *
 *************************************************************/
void count_letters(FILE *f_in_ptr, char *c1, char *c2, char *c3);

/*************************************************************
 * Read from XUniversityEncoded file to decode message and   *
 * write decoded (plain text) message to XUniversityMessage  *
 * file. Make sure c1 keeps most frequent used letter,  c3   *
 * keeps least frequent used letter and  c2 keeps remained   *
 * letter while calling function. According to frequency     *
 * you know their codes. c1: 0, c2: 10, c3: 110.             *
 *************************************************************/
void decode(FILE *f_in_ptr, FILE *f_out_ptr, char c1, char c2, char c3);

/*************************************************************
 * Learns XUniversity's encoding system from given files ,   *
 * decodes their encoded messages and writes as plain text to*
 * a file                                                    *
 *************************************************************/

int main()
{
	FILE *f_character_list_ptr, 
		 *f_sample_file_ptr, 
		 *f_encoded_ptr,
		 *f_plain_text_ptr;

	int character_number;
	char c1, c2, c3;

	f_character_list_ptr=fopen("CharacterList.txt","r");
	if(f_character_list_ptr==NULL){
		printf("error!! Character list file couldn't odenep.\n");
		return 1;
		}
	else read_character_list(f_character_list_ptr,&c1,&c2,&c3);
	fclose(f_character_list_ptr);

	f_sample_file_ptr=fopen("Sample.txt","r");
	if(f_sample_file_ptr==NULL)	
		printf("error!! sample file could't opened\n");
	else count_letters(f_sample_file_ptr,&c1,&c2,&c3);
	printf("%c %c %c",c1,c2,c3);
	fclose(f_sample_file_ptr);
	
	f_encoded_ptr=fopen("XUniversityEncoded.txt","r");
	f_plain_text_ptr=fopen("XUniversityMessage.txt","w");
	if (f_encoded_ptr==NULL)
		printf("Error!! XUniversityEncoded file couldn't opened");
	else decode(f_encoded_ptr,f_plain_text_ptr,c1,c2,c3); 
	fclose(f_encoded_ptr);
	fclose(f_plain_text_ptr);
	return 0;
}

/************************************************************/
/*							FUNCTİONS						*/
/************************************************************/

/*************************************************************
 * Check whether character is big ASCII letter or not        *
 * return TRUE or FALSE                                      *
 *************************************************************/
int 
is_letter(char c)
{
	/*ASCI codes starts 65 ends 90*/

	if ((int)c>=65&&(int)c<=90){
		return TRUE;
	}	
	return FALSE;
}

/*************************************************************
 * Read characters from character list file and if character *
 * is letter assign characters to c1, c2 and c3.             *
 * If file has not three letters assign NULL to input char   *
 * by order. For ex. file has two letters assign proper      *
 * letters to c1 and c2 and assign NULL to c3. If file has   *
 * four letters assign c1, c2 and c3 first three letters.    *
 * Return number of letters in character list file.          *
 * Do not forget to count only proper letters with your      *
 * is_letter function. Return number of letters not chars    *
 *************************************************************/
int 
read_character_list(FILE* f_in_ptr, char *c1, char *c2, char *c3)
{	
	int a=0;
	char c;
	int counter = 0;
	do{
		a=fscanf(f_in_ptr,"%c",&c);
		switch (counter){		
			case 0 : 
				if(is_letter(c)==1){
					*c1=c;
					++counter;
				}
			//	else *(&c1)=NULL;
				break;
			case 1 : 
				if(is_letter(c)==1){
					*c2=c;
					++counter;
				}
			//	else *(&c2)=NULL;
				break;
			case 2 :
				if(is_letter(c)==1){
					*c3=c;
					++counter;
				}
			//	else *(&c3)=NULL;
				break;
		}
	}
	while(a!=EOF);
	return counter;
}

/*************************************************************
 * Read letters from Sample file and compute frequency of    *
 * letters. Then sort it inside this function. Call sort     *
 * function. At the end make sure that *c1 keeps most        *
 * frequent used letter, *c3 keeps least frequent used       *
 * letter and *c2 keeps remained letter                      *
 *************************************************************/
void
count_letters(FILE *f_in_ptr, char *c1, char *c2, char *c3)
{

	/* Hint: Read character by character and increment counter
	 * of proper counter of read character.
	 */
	int a;
	char read;
	int count1=0,count2=0,count3=0;
	do{
		a=fscanf(f_in_ptr,"%c",&read);
		if(read==*c1)
			++count1;
		else if(read==*c2)
			++count2;
		else if(read==*c3)
			++count3;
	}
	while(a!=EOF);
	sort(c1,count1,c2,count2,c3,count3);
}

/*************************************************************
 * Swaps values of two integers                              *
 *************************************************************/
void 
swap_int(int *a, int *b)
{
	int c;
	c=*a;
	*a=*b;
	*b=c;
}

/*************************************************************
 * Swaps values of two characters                            *
 *************************************************************/
void 
swap_char(char *a, char *b)
{
	char c;
	c=*a;
	*a=*b;
	*b=c;
}

/*************************************************************
 * Sorts characters according to counts. At the end          *
 * make sure that *c1 keeps most frequent used letter, *c3   *
 * keeps least frequent used letter and *c2 keeps remained   *
 * letter                                                    *
 *************************************************************/
void
sort(char *a, int a_num, char *b, int b_num, char *c, int c_num)
{
	if (a_num<b_num){
		swap_int(&a_num,&b_num);
		swap_char(a,b);
	}
	if(a_num<c_num){
		swap_int(&a_num,&c_num);
		swap_char(a,c);	
	}
	if (b_num<c_num){
		swap_int(&b_num,&c_num);
		swap_char(b,c);
	}
}
/*************************************************************
 * Read from XUniversityEncoded file to decode message and   *
 * write decoded (plain text) message to XUniversityMessage  *
 * file. Make sure c1 keeps most frequent used letter,  c3   *
 * keeps least frequent used letter and  c2 keeps remained   *
 * letter while calling function. According to frequency     *
 * you know their codes. c1: 0, c2: 10, c3: 110.             *
 *************************************************************/
void 
decode(FILE *f_in_ptr, FILE *f_out_ptr, char c1, char c2, char c3)
{
	int encode_number;
	int a;
	int m=0;
	a=fscanf(f_in_ptr,"%1d",&encode_number);
	do{
		printf("%d\n",encode_number);
		if(encode_number==0){
			switch (m){
				case 0 : fprintf(f_out_ptr,"%c",c1);
					break;
				case 1 : fprintf(f_out_ptr,"%c",c2);
					break;
				case 2 : fprintf(f_out_ptr,"%c",c3);
					break;
			}
			m=-1;
		}
		a=fscanf(f_in_ptr,"%1d",&encode_number);
		++m;
	}
	while(a!=EOF);
}
